/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.14/samples
 */

plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.13.0'
    id 'org.springframework.boot' version '3.5.0-M2' apply false
}


ext {
    springBootVersion = '3.5.0-M2'
    springVersion = '6.2.5'
    springCloudGCP = '6.2.1'

    // Annotations
    lombokVersion = '1.18.36'

    // GCP
    gcpBOMVersion = '26.57.0'
    springCloudGcpBOMVersion = '6.2.1'

    log4jVersion = '2.24.3'

    // Testing
    groovyVersion = '3.0.17'
    spockSpringVersion = '2.4-M5-groovy-3.0'
    jacksonDataformatYamlVersion = '2.18.3'
}

allprojects {
    version = '1.0.0'

    repositories {
        mavenCentral()
        maven {
            url = "https://repository.sabre-gcp.com/repository/maven-all"
            credentials {
                username = project.findProperty("mavenUser") ?: ""
                password = project.findProperty("mavenPassword") ?: ""
            }
        }
        maven {
            url = "https://repository.sabre-gcp.com/repository/maven-thirdparty"
            credentials {
                username = project.findProperty("mavenUser") ?: ""
                password = project.findProperty("mavenPassword") ?: ""
            }
        }
    }


}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'application'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    dependencies {
        //================ Core Spring Boot ================
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpBOMVersion}")
        implementation 'org.springframework.boot:spring-boot-starter-web'

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        //================ Core Spring  ================
        //implementation("org.springframework:spring-framework-bom:${springVersion}")
        // flux for webclient

        //================ Core GCP Spring  ================

        //================ Testing =================
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation "org.spockframework:spock-spring:${spockSpringVersion}"
        testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

        //================ Annotations =================
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


        //================ Logging (Fixed) =================
        implementation "org.springframework.boot:spring-boot-starter-log4j2"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataformatYamlVersion}"

        //================ Cache =================
        implementation 'com.github.ben-manes.caffeine:caffeine'
        implementation 'org.springframework.boot:spring-boot-starter-cache'

        // Exclude Log4j SLF4J bindings if using Logback
        configurations.all {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
            exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        }
    }
    // Gradle to recognize test sources
    sourceSets {
        test {
            groovy.srcDirs = ['src/test/groovy']
            java.srcDirs = ['src/test/java']
        }
    }

    test {
//        useJUnitPlatform()
//        finalizedBy jacocoTestReport
    }


//    def dockerBuildProjects = ['uiq-bolt', 'skibidi']
//
//    dockerBuildProjects.each { subprojectName ->
//        def sub = project(":$subprojectName")
//        def imageName = "${sub.name}:${sub.version}"
//        def artifactPath = "build/libs/${sub.name}-${sub.version}.jar"
//
//        sub.afterEvaluate {
//            if (!sub.tasks.findByName("dbuild")) {
//                sub.tasks.register("dbuild", Exec) {
//                    group = 'docker'
//                    description = 'Builds Docker image using CLI'
//
//                    dependsOn sub.tasks.named("build") // lazy dependency
//
//                    doFirst {
//
//                        println "Building Docker image: $imageName"
//
//                        commandLine 'docker', 'build',
//                                '-t', imageName,
//                                '--build-arg', "ARTIFACT_DIR=${artifactPath}",
//                                '.'
//                    }
//                }
//            }
//        }
//    }

    dependencyManagement {
        imports {
            mavenBom "com.google.cloud:libraries-bom:${gcpBOMVersion}"
            mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGCP}"
        }
        dependencies {
            dependency 'org.apache.commons:commons-lang3:3.17.0'
            dependency 'commons-io:commons-io:2.19.0'
        }
    }
}

